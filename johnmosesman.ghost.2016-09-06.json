{"db":[{"meta":{"exported_on":1473184479134,"version":"004"},"data":{"posts":[{"id":1,"uuid":"976e4df7-9b6e-4919-b5cb-cd7ae1b5c769","title":"Starting Again With Ghost","slug":"starting-again-with-ghost","markdown":"#### Setting up a Ghost Blog\nI've been a little busy recently (aren't we all?), and one of the things that dropped off the radar was blogging and blog maintenance. But, I'm back, with a [Ghost](https://ghost.org/) blog hosted on [Digital Ocean](https://www.digitalocean.com/). \n\nIt was actually quite easy to get setup, so I leave this post behind for anyone wanting to do the same. [Here's the tutorial I followed](https://www.digitalocean.com/community/tutorials/how-to-use-the-digitalocean-ghost-application). The tutorial is a few years old, but it was still very good.\n\n#### Looking for old posts?\nI had some old Ember posts up, but they are quickly becoming outdated with how fast the framework moves. I do plan to more posts on Ember in the future, but for now all of the code from those posts still exist on [my github.](https://github.com/johnmosesman)","html":"<h4 id=\"settingupaghostblog\">Setting up a Ghost Blog</h4>\n\n<p>I've been a little busy recently (aren't we all?), and one of the things that dropped off the radar was blogging and blog maintenance. But, I'm back, with a <a href=\"https://ghost.org/\">Ghost</a> blog hosted on <a href=\"https://www.digitalocean.com/\">Digital Ocean</a>. </p>\n\n<p>It was actually quite easy to get setup, so I leave this post behind for anyone wanting to do the same. <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-the-digitalocean-ghost-application\">Here's the tutorial I followed</a>. The tutorial is a few years old, but it was still very good.</p>\n\n<h4 id=\"lookingforoldposts\">Looking for old posts?</h4>\n\n<p>I had some old Ember posts up, but they are quickly becoming outdated with how fast the framework moves. I do plan to more posts on Ember in the future, but for now all of the code from those posts still exist on <a href=\"https://github.com/johnmosesman\">my github.</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"","meta_description":"Relaunch of the blog using Ghost hosted on Digital Ocean (tutorial link included).","author_id":1,"created_at":1448770471145,"created_by":1,"updated_at":1448775044618,"updated_by":1,"published_at":1448770440000,"published_by":1},{"id":2,"uuid":"c151f5e9-af7e-4fae-a593-fad363c046d8","title":"Easy Uses for Git Rebase","slug":"easy-use-for-git-rebase","markdown":"[Git](https://git-scm.com/) is a powerful and useful tool, but let's face it, at some point you're going to mess up. Or, if you don't, at some point someone _else_ will, and you'll have to fix it. Below is what I've learned about using rebase to fix these problems.\n\nThese problems usually take the form of:\n\n* Committing code on the wrong branch\n* Pushing incorrect commits to a remote repo\n* Merging a branch that wasn't quite ready\n\nI'll assume you have a basic understanding of git—just committing and pushing code.\n\n## Enter Rebase\nRebasing is kind of a mind-numbing topic. Explanations of it are always filled with elaborate diagrams that really never make much sense to me. There's a pretty good explanation [here](https://www.atlassian.com/git/tutorials/rewriting-history), but in a nutshell, rebasing edits the commit history and makes new commits out of the old ones. But moving on!\n\n## An Example\nOpen a blank file and save some sentence inside of it like, `Vanilla is the best flavor of icecream` and commit it. I called mine `README.md` with a commit message of `Create README.md`. \n\nNext, push it up to a remote repository. \n\nNow, let's say someone changes \"vanilla\" to \"chocolate\" (which is _obviously_ wrong), and pushes it up.\n\nA mistake has been pushed to `master`! (oh noes)\n\n![Mistake in master](https://raw.githubusercontent.com/johnmosesman/blog/master/learning_to_rebase/mistake_in_master.png)\n\nNow this is a simple example, so you could easily change it back to \"vanilla\" and push to master, but in a real-world scenario, this could mean dozens of commits and files changed. Taking care of them in a one-by-one basis wouldn't be feasible.\n\nSo, rebase to the rescue!\n\nBefore we move on, make sure you're up-to-date: `git pull origin master`.\n\n## Git History\nThe first thing you want to find is the SHA of the commit that is _one before the last good commit you want to keep_. It may take a couple times to figure out which commit is the right one to use, but this will make sense once you see it in action.\n\nTo see a history of your commits, type `git log`. Here's my output:\n\n```\njohn:~/Dropbox/blog/learning_to_rebase (master)$ git log\ncommit d583095fb7e1bd4bf0b2511455b40d7cc3563c0a\nAuthor: John Mosesman <johnmosesman@gmail.com>\nDate:   Sun Nov 29 11:52:43 2015 -0600\n\n    *Chocolate* is the best flavor of icecream\n\ncommit 30b4442f9ae5c0fc3cd590892f81625bbee25dd4\nAuthor: John Mosesman <johnmosesman@gmail.com>\nDate:   Sun Nov 29 11:52:43 2015 -0600\n\n    Vanilla is the best flavor of icecream\n\ncommit 4ef8d1cb697f9301085d7b31e5328132ed3333c8\nAuthor: John Mosesman <johnmosesman@users.noreply.github.com>\nDate:   Sat Nov 28 23:51:16 2015 -0600\n\n    Create README.md\n...\njohn:~/Dropbox/blog/learning_to_rebase (master)$\n```\n\nThe _last good commit_ before the problem is the one titled \"Vanilla is the best flavor of icecream.\" We want to go to the one _before_ that, which is \"Create README.md\", and it's SHA begins with `4ef8d1cb...`.\n\n## Doing the Rebase\nTo start rebasing at that point in time, we pass the full SHA of the commit and the `-i` flag for interactive mode.\n\n`$ git rebase -i 4ef8d1cb697f9301085d7b31e5328132ed3333c8 # Your SHA here`\n\nBelow is the output. Notice that we have all of the commits _after_ the one we've chosen (the good commit and the bad one). The reason we start with one _before_ the good commit is because of this line in the instructions below: \"However, if you remove everything, the rebase will be aborted.\" Basically, we have to keep at least one commit—we can't just delete the bad ones.\n\n```\npick d583095 *Chocolate* is the best flavor of icecream\npick 30b4442 Vanilla is the best flavor of icecream\n\n# Rebase 4ef8d1c..2728a63 onto 4ef8d1c (       2 TODO item(s))\n#\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n# s, squash = use commit, but meld into previous commit\n# f, fixup = like \"squash\", but discard this commit's log message\n# x, exec = run command (the rest of the line) using shell\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n```\n\nNotice the various key words and what they do. The only one we're going to use here is `pick`. `pick` tells git which commits to keep and use when re-applying the commits. \n\nTo remove our mistake here, all we have to do is delete the line that says `*Chocolate* is the best flavor of icecream`.\n\nBy default my editor is `vim`—which is a large topic in and of itself—but to speed through this, you can use `j` and `k` to move between lines, and type `dd` to delete the line you want. Afterwards, `:wq` will _write_ and _quit_ the file (if you want to do a quick tutorial of Vim, just type `vimtutor` in any shell).\n\nBefore you `:wq` the file should look like this:\n\n```\npick 30b4442 Vanilla is the best flavor of icecream\n\n# Rebase 4ef8d1c..2728a63 onto 4ef8d1c (       2 TODO item(s))\n#\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n...\n```\n\nAfter the `:wq`, you should see the following message in your shell: `Successfully rebased and updated refs/heads/master.` If we type `git log` again we'll see that the commit is gone! To correct `master` on the remote repository we just need to do a force push:  `git push -f origin master` (side note: it's always scary to do a `-f`).\n\nAnd that's it!\n\nIf you have comments or questions, <a href=\"mailto:johnmosesman@gmail.com?subject=Learning%20To%20Rebase\" target=\"_top\">feel free to email me</a> or hit me up on twitter: [@johnmosesman.](https://twitter.com/johnmosesman)\n\n## Bonus Feature: Squash/Fixup\nAs a side note, let's say you're editing a README and you find a grammar or spelling change, commit it, and push it up. After that, you find another one, and do the same. You could do this several times, and end up with five different commits—all editing the same file with the same purpose. While this isn't _bad_, persay, it does bloat the repository when really all of those commits were one idea. \n\nWhile rebasing, you can use `squash` or `fixup` to combine all of these commits into one. Just a way to keep the repository history a little cleaner!","html":"<p><a href=\"https://git-scm.com/\">Git</a> is a powerful and useful tool, but let's face it, at some point you're going to mess up. Or, if you don't, at some point someone <em>else</em> will, and you'll have to fix it. Below is what I've learned about using rebase to fix these problems.</p>\n\n<p>These problems usually take the form of:</p>\n\n<ul>\n<li>Committing code on the wrong branch</li>\n<li>Pushing incorrect commits to a remote repo</li>\n<li>Merging a branch that wasn't quite ready</li>\n</ul>\n\n<p>I'll assume you have a basic understanding of git—just committing and pushing code.</p>\n\n<h2 id=\"enterrebase\">Enter Rebase</h2>\n\n<p>Rebasing is kind of a mind-numbing topic. Explanations of it are always filled with elaborate diagrams that really never make much sense to me. There's a pretty good explanation <a href=\"https://www.atlassian.com/git/tutorials/rewriting-history\">here</a>, but in a nutshell, rebasing edits the commit history and makes new commits out of the old ones. But moving on!</p>\n\n<h2 id=\"anexample\">An Example</h2>\n\n<p>Open a blank file and save some sentence inside of it like, <code>Vanilla is the best flavor of icecream</code> and commit it. I called mine <code>README.md</code> with a commit message of <code>Create README.md</code>. </p>\n\n<p>Next, push it up to a remote repository. </p>\n\n<p>Now, let's say someone changes \"vanilla\" to \"chocolate\" (which is <em>obviously</em> wrong), and pushes it up.</p>\n\n<p>A mistake has been pushed to <code>master</code>! (oh noes)</p>\n\n<p><img src=\"https://raw.githubusercontent.com/johnmosesman/blog/master/learning_to_rebase/mistake_in_master.png\" alt=\"Mistake in master\" /></p>\n\n<p>Now this is a simple example, so you could easily change it back to \"vanilla\" and push to master, but in a real-world scenario, this could mean dozens of commits and files changed. Taking care of them in a one-by-one basis wouldn't be feasible.</p>\n\n<p>So, rebase to the rescue!</p>\n\n<p>Before we move on, make sure you're up-to-date: <code>git pull origin master</code>.</p>\n\n<h2 id=\"githistory\">Git History</h2>\n\n<p>The first thing you want to find is the SHA of the commit that is <em>one before the last good commit you want to keep</em>. It may take a couple times to figure out which commit is the right one to use, but this will make sense once you see it in action.</p>\n\n<p>To see a history of your commits, type <code>git log</code>. Here's my output:</p>\n\n<pre><code>john:~/Dropbox/blog/learning_to_rebase (master)$ git log  \ncommit d583095fb7e1bd4bf0b2511455b40d7cc3563c0a  \nAuthor: John Mosesman &lt;johnmosesman@gmail.com&gt;  \nDate:   Sun Nov 29 11:52:43 2015 -0600\n\n    *Chocolate* is the best flavor of icecream\n\ncommit 30b4442f9ae5c0fc3cd590892f81625bbee25dd4  \nAuthor: John Mosesman &lt;johnmosesman@gmail.com&gt;  \nDate:   Sun Nov 29 11:52:43 2015 -0600\n\n    Vanilla is the best flavor of icecream\n\ncommit 4ef8d1cb697f9301085d7b31e5328132ed3333c8  \nAuthor: John Mosesman &lt;johnmosesman@users.noreply.github.com&gt;  \nDate:   Sat Nov 28 23:51:16 2015 -0600\n\n    Create README.md\n...\njohn:~/Dropbox/blog/learning_to_rebase (master)$  \n</code></pre>\n\n<p>The <em>last good commit</em> before the problem is the one titled \"Vanilla is the best flavor of icecream.\" We want to go to the one <em>before</em> that, which is \"Create README.md\", and it's SHA begins with <code>4ef8d1cb...</code>.</p>\n\n<h2 id=\"doingtherebase\">Doing the Rebase</h2>\n\n<p>To start rebasing at that point in time, we pass the full SHA of the commit and the <code>-i</code> flag for interactive mode.</p>\n\n<p><code>$ git rebase -i 4ef8d1cb697f9301085d7b31e5328132ed3333c8 # Your SHA here</code></p>\n\n<p>Below is the output. Notice that we have all of the commits <em>after</em> the one we've chosen (the good commit and the bad one). The reason we start with one <em>before</em> the good commit is because of this line in the instructions below: \"However, if you remove everything, the rebase will be aborted.\" Basically, we have to keep at least one commit—we can't just delete the bad ones.</p>\n\n<pre><code>pick d583095 *Chocolate* is the best flavor of icecream  \npick 30b4442 Vanilla is the best flavor of icecream\n\n# Rebase 4ef8d1c..2728a63 onto 4ef8d1c (       2 TODO item(s))\n#\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n# s, squash = use commit, but meld into previous commit\n# f, fixup = like \"squash\", but discard this commit's log message\n# x, exec = run command (the rest of the line) using shell\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n</code></pre>\n\n<p>Notice the various key words and what they do. The only one we're going to use here is <code>pick</code>. <code>pick</code> tells git which commits to keep and use when re-applying the commits. </p>\n\n<p>To remove our mistake here, all we have to do is delete the line that says <code>*Chocolate* is the best flavor of icecream</code>.</p>\n\n<p>By default my editor is <code>vim</code>—which is a large topic in and of itself—but to speed through this, you can use <code>j</code> and <code>k</code> to move between lines, and type <code>dd</code> to delete the line you want. Afterwards, <code>:wq</code> will <em>write</em> and <em>quit</em> the file (if you want to do a quick tutorial of Vim, just type <code>vimtutor</code> in any shell).</p>\n\n<p>Before you <code>:wq</code> the file should look like this:</p>\n\n<pre><code>pick 30b4442 Vanilla is the best flavor of icecream\n\n# Rebase 4ef8d1c..2728a63 onto 4ef8d1c (       2 TODO item(s))\n#\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n...\n</code></pre>\n\n<p>After the <code>:wq</code>, you should see the following message in your shell: <code>Successfully rebased and updated refs/heads/master.</code> If we type <code>git log</code> again we'll see that the commit is gone! To correct <code>master</code> on the remote repository we just need to do a force push:  <code>git push -f origin master</code> (side note: it's always scary to do a <code>-f</code>).</p>\n\n<p>And that's it!</p>\n\n<p>If you have comments or questions, <a href=\"mailto:johnmosesman@gmail.com?subject=Learning%20To%20Rebase\" target=\"_top\">feel free to email me</a> or hit me up on twitter: <a href=\"https://twitter.com/johnmosesman\">@johnmosesman.</a></p>\n\n<h2 id=\"bonusfeaturesquashfixup\">Bonus Feature: Squash/Fixup</h2>\n\n<p>As a side note, let's say you're editing a README and you find a grammar or spelling change, commit it, and push it up. After that, you find another one, and do the same. You could do this several times, and end up with five different commits—all editing the same file with the same purpose. While this isn't <em>bad</em>, persay, it does bloat the repository when really all of those commits were one idea. </p>\n\n<p>While rebasing, you can use <code>squash</code> or <code>fixup</code> to combine all of these commits into one. Just a way to keep the repository history a little cleaner!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"","meta_description":"When something goes wrong with git, rebase comes to the rescue. Examples and tutorial.","author_id":1,"created_at":1448829630250,"created_by":1,"updated_at":1448830265474,"updated_by":1,"published_at":1448830249313,"published_by":1},{"id":3,"uuid":"df152685-03ae-4e35-911b-fe47a24031c8","title":"Testing a Rails API","slug":"testing-a-rails-api","markdown":"This post comes from my recent experience in testing and evolving a fairly large Rails API (it powers three Ember apps, a build automation server, and a mobile app). I don't pretend to be a testing expert, but the practices below have helped me reduce and prevent bugs, speed up development, and ensure changes don't break existing behavior.\n\n### This post assumes you know:\n\n* The value of testing :)\n* Basic CRUD actions in a Rails API\n* How to test with [minitest](https://github.com/seattlerb/minitest) (aka [Rails minitest](https://github.com/blowmage/minitest-rails)) \n* [ActiveModelSerializer](https://github.com/rails-api/active_model_serializers)\n\nThe sample Rails project I used to write this post is [on github](https://github.com/johnmosesman/blog/tree/master/rails_api_testing/api_testing) if you'd like to look at it.\n\nLet's begin!\n\n## Model\n\nThe first model test I like to start out with (model here being an `ActiveRecord` model) is a validation test. I want to know that my fixture is valid, and that creating a brand new object is not:\n\n```\n# test/models/post_test.rb\nclass PostTest < ActiveSupport::TestCase                                                        \n  def test_valid                                                                                \n    assert posts(:one).valid?                                                                   \n    refute Post.new.valid?                                                                      \n  end                                                                                                                                                                                        \nend\n```\n\nI then also test all non-private methods:\n\n```\n# test/models/post_test.rb\nclass PostTest < ActiveSupport::TestCase                                                        \n  def test_valid                                                                                \n  \t...\n  end \n  \n  def test_some_method\n\tassert_equal 'something', posts(:one).some_method\n\tassert_equal 'something else', posts(:two).some_method\n  end                                                                                                                                                                                       \nend\n```\n\n## Controllers\n\n### Responses and content types\n\nController testing is where it starts to get interesting. At a high-level, we want to know that the call succeeded. So, we can test the `response` and test that we're sending the correct content type (JSON).\n\n```\n# test/controllers/api/posts_controller_test.rb\nclass Api::PostsControllerTest < ActionController::TestCase          \n  def test_index                                                     \n    get :index, { user_id: users(:one).id }                          \n                                                                     \n    assert_response :success                                         \n    assert_equal Mime::JSON, response.content_type                                 \n  end                                                                \n```\n\nThe above is more of a sanity check than a thorough test, but it will help catch dumb errors like incorrect syntax.\n\n### Asserting change (or no change)\n\n#### Create\nIn the case of an action that changes the data (or should not change the data), we can use `assert_difference` or `assert_no_difference`:\n\n```\n# test/controllers/api/posts_controller_test.rb\nclass Api::PostsControllerTest < ActionController::TestCase          \n  def test_index                                                     \n    ...\n  end\n  \n  def test_create                                                                                  \n    assert_difference \"Post.count\" do                                                              \n      post :create, { post: { body: 'some body', author: 'some author', user_id: users(:one).id } }\n    end                                                                                            \n                                                                                                   \n    assert_response :success                                                                       \n    assert_equal Mime::JSON, response.content_type                                                 \n  end                                                                                              \n                                                                                                   \n  def test_create_with_invalid_parameters                                                          \n    assert_no_difference \"Post.count\" do                                                           \n      post :create, { post: { body: nil, author: nil, user_id: nil } }                             \n    end                                                                                            \n                                                                                                   \n    assert_response :unprocessable_entity                                                          \n    assert_equal Mime::JSON, response.content_type                                                 \n  end                                                                                              \n```\n\n#### Update\n\nIn an `update` action, I like to check that the fields actually changed. This has caught bugs where I've added a new field to the model, but forgot to update the white-listed parameters, so the field never actually gets updated.\n\n```\n# test/controllers/api/posts_controller_test.rb\nclass Api::PostsControllerTest < ActionController::TestCase\n  ...\n    \n  def test_update                                                                                                                                                                              \n    the_post = posts(:one)                                                                                                                                                                     \n                                                                                                                                                                                             \n    assert_no_difference \"Post.count\" do                                                                                                                                                       \n      put :update, { id: the_post.id, post: { body: 'new body', author: 'new author', user_id: 5 } }                                                                                           \n    end                                                                                                                                                                                        \n                                                                                                                                                                                             \n    assert_response :success                                                                                                                                                                   \n    assert_equal Mime::JSON, response.content_type                                                                                                                                             \n                                                                                                                                                                                             \n    the_post.reload                                                                                                                                                                            \n    assert_equal 'new body', the_post.body                                                                                                                                                     \n    assert_equal 'new author', the_post.author                                                                                                                                                 \n    assert_equal 5, the_post.user_id                                                                                                                                                           \n  end                                                                                                                                                                                          \n                                                                                                                                                                                                 \n  def test_update_with_invalid_paramters                                                                                                                                                                              \n    the_post = posts(:one)                                                                                                                                                                     \n                                                                                                                                                                                                 \n    assert_no_difference \"Post.count\" do                                                                                                                                                       \n      put :update, { id: the_post.id, post: { body: nil, author: nil, user_id: nil } }                                                                                                         \n    end                                                                                                                                                                                        \n                                                                                                                                                                                                 \n    assert_response :unprocessable_entity                                                                                                                                                      \n    assert_equal Mime::JSON, response.content_type                                                                                                                                             \n  end\nend                                                                                                                                                                                          \n```\n\n\n\n### Serializers\n\nThe final basic test I like to do is to setup a contract of sorts around what fields are being sent back in the serializer. This helps prevent breaking the frontend by removing/renaming fields. I treat this test like a basic model test:\n\n```\n# test/serializers/post_serializer_test.rb\nclass PostsSerializerTest < ActiveSupport::TestCase                                                                                      \n  def test_fields                                                                                                                        \n    serializer = Api::PostsSerializer.new(posts(:one))                                                                                   \n                                                                                                                                         \n    fields = [:id, :body, :author, :user_id]                                                                                             \n    assert_equal fields, serializer.attributes.keys                                                                                      \n  end                                                                                                                                    \nend                                                                                                                                      \n```\n\n\n## Testing the data returned\n\nWhile the tests above are definitely useful, I think they are missing something—especially in the `index` example above. We don't know what was actually sent to the client. Yes the call succeeded, but did we send the right data? Did we send any data at all? Basic tests like these don't instill confidence in me that our business logic is correct.\n\nIn the case of the `index` action, we have a couple of options here:\n\n1. Parse the controller return and test the result\n2. Move logic into model methods and test those\n\n### Parsing the response\n\nLet's revisit the `index` test we have above. In this action we're returning all of the posts that belong to a user. By parsing the `response.body` and testing its data, we have more confidence that the data we're returning is actually correct—that the post actually belongs to the user. While I think this is not an amazing solution, it does up our level of confidence in the code:\n\n```\n# test/controllers/api/posts_controller_test.rb\nclass Api::PostsControllerTest < ActionController::TestCase                                                                                                                                        \n  def test_index                                                                                                                                                                                   \n    get :index, { user_id: users(:one).id }                                                                                                                                                        \n                                                                                                                                                                                                   \n    assert_response :success                                                                                                                                                                       \n    assert_equal Mime::JSON, response.content_type                                                                                                                                                 \n                                                                                                                                                                                                   \n    # Compare what the controller returned to the posts user one has.                                                                                                                              \n    json = JSON.parse(response.body)                                                                                                                                                               \n    post_json = json[\"posts\"].first                                                                                                                                                                \n                                                                                                                                                                                                   \n    the_post = posts(:one)                                                                                                                                                                         \n    assert_equal the_post.id, post_json[\"id\"]                                                                                                                                                      \n    assert_equal the_post.body, post_json[\"body\"]                                                                                                                                                  \n    assert_equal the_post.author, post_json[\"author\"]                                                                                                                                              \n  end           \nend                                                                                                                                                                                   \n```\n\nI have used this type of test in places where I wasn't using `ActiveModelSerializer` (read: _legacy code_), and in the past it has been a hint that the code is poorly structured—too much logic in the controller, or logic inside of the view ([jbuilder](https://github.com/rails/jbuilder) or AMS). But, sometimes this type of testing is better than nothing.\n\n### Fat Models Skinny Controllers™\n\nParsing the response body can be cumbersome. Usually you end up having to iterate over the JSON data because you've lost the ActiveRecord niceities like querying and finding.\n\nThe approach I tend to take now is to move logic into the model, and write a model test. This simplifies the controller, but trusts that the controller is doing the simple job of requesting and returning the data. There is an element of risk here. You could `render json: nil` accidentally and forget to return the objects, but in my experience this hasn't been an issue.\n\nSo, instead of querying the posts like this and parsing the response in the controller test to make sure we got the correct posts:\n\n`@posts = Post.where(user_id: params[:user_id])`\n\nWe can do something like (again, trivial example but it shows the point):\n\n`@posts = Post.for_user(params[:user_id])`\n\nMoving the logic into the `for_user` method and out of the controller moves the burden of testing from the controller onto the model (which is much easier to test, and the new method has the possibility of re-use in the future).\n\nThen the tests look like this:\n\n```\n# test/controllers/api/posts_controller_test.rb\nclass Api::PostsControllerTest < ActionController::TestCase                                                                                                                                        \n  def test_index                                                                                                                                                                                   \n    get :index, { user_id: users(:one).id }                                                                                                                                                        \n                                                                                                                                                                                                   \n    assert_response :success  \n    assert assigns(:posts)      # Threw this in for fun\n    assert_equal Mime::JSON, response.content_type                                                                                                                                                 \n  end\nend\n\n# test/models/post_test.rb\nclass PostTest < ActiveSupport::TestCase                                                       \n  def test_valid                                                                               \n    ...\n  end                                                                                          \n                                                                                               \n  def test_for_user\n    assert_equal [posts(:one)], Post.for_user(users(:one).id)\n    assert_equal [posts(:two)], Post.for_user(users(:two).id)\n  end\nend\n```\n\n### Final thoughts\n\nEven though the Rails world is \"convention over configuration\", there's still a lot of debate over what the proper convention is. These are just my experiences, and I hope something here helps you in your specific circumstance or project. \n\nEither way I'd love to hear thoughts or comments around this. Feel free to email me at <johnmosesman@gmail.com> or hit me up on twitter, [@johnmosesman](https://twitter.com/johnmosesman).","html":"<p>This post comes from my recent experience in testing and evolving a fairly large Rails API (it powers three Ember apps, a build automation server, and a mobile app). I don't pretend to be a testing expert, but the practices below have helped me reduce and prevent bugs, speed up development, and ensure changes don't break existing behavior.</p>\n\n<h3 id=\"thispostassumesyouknow\">This post assumes you know:</h3>\n\n<ul>\n<li>The value of testing :)</li>\n<li>Basic CRUD actions in a Rails API</li>\n<li>How to test with <a href=\"https://github.com/seattlerb/minitest\">minitest</a> (aka <a href=\"https://github.com/blowmage/minitest-rails\">Rails minitest</a>) </li>\n<li><a href=\"https://github.com/rails-api/active_model_serializers\">ActiveModelSerializer</a></li>\n</ul>\n\n<p>The sample Rails project I used to write this post is <a href=\"https://github.com/johnmosesman/blog/tree/master/rails_api_testing/api_testing\">on github</a> if you'd like to look at it.</p>\n\n<p>Let's begin!</p>\n\n<h2 id=\"model\">Model</h2>\n\n<p>The first model test I like to start out with (model here being an <code>ActiveRecord</code> model) is a validation test. I want to know that my fixture is valid, and that creating a brand new object is not:</p>\n\n<pre><code># test/models/post_test.rb\nclass PostTest &lt; ActiveSupport::TestCase  \n  def test_valid                                                                                \n    assert posts(:one).valid?                                                                   \n    refute Post.new.valid?                                                                      \n  end                                                                                                                                                                                        \nend  \n</code></pre>\n\n<p>I then also test all non-private methods:</p>\n\n<pre><code># test/models/post_test.rb\nclass PostTest &lt; ActiveSupport::TestCase  \n  def test_valid                                                                                \n      ...\n  end \n\n  def test_some_method\n    assert_equal 'something', posts(:one).some_method\n    assert_equal 'something else', posts(:two).some_method\n  end                                                                                                                                                                                       \nend  \n</code></pre>\n\n<h2 id=\"controllers\">Controllers</h2>\n\n<h3 id=\"responsesandcontenttypes\">Responses and content types</h3>\n\n<p>Controller testing is where it starts to get interesting. At a high-level, we want to know that the call succeeded. So, we can test the <code>response</code> and test that we're sending the correct content type (JSON).</p>\n\n<pre><code># test/controllers/api/posts_controller_test.rb\nclass Api::PostsControllerTest &lt; ActionController::TestCase  \n  def test_index                                                     \n    get :index, { user_id: users(:one).id }                          \n\n    assert_response :success                                         \n    assert_equal Mime::JSON, response.content_type                                 \n  end                                                                \n</code></pre>\n\n<p>The above is more of a sanity check than a thorough test, but it will help catch dumb errors like incorrect syntax.</p>\n\n<h3 id=\"assertingchangeornochange\">Asserting change (or no change)</h3>\n\n<h4 id=\"create\">Create</h4>\n\n<p>In the case of an action that changes the data (or should not change the data), we can use <code>assert_difference</code> or <code>assert_no_difference</code>:</p>\n\n<pre><code># test/controllers/api/posts_controller_test.rb\nclass Api::PostsControllerTest &lt; ActionController::TestCase  \n  def test_index                                                     \n    ...\n  end\n\n  def test_create                                                                                  \n    assert_difference \"Post.count\" do                                                              \n      post :create, { post: { body: 'some body', author: 'some author', user_id: users(:one).id } }\n    end                                                                                            \n\n    assert_response :success                                                                       \n    assert_equal Mime::JSON, response.content_type                                                 \n  end                                                                                              \n\n  def test_create_with_invalid_parameters                                                          \n    assert_no_difference \"Post.count\" do                                                           \n      post :create, { post: { body: nil, author: nil, user_id: nil } }                             \n    end                                                                                            \n\n    assert_response :unprocessable_entity                                                          \n    assert_equal Mime::JSON, response.content_type                                                 \n  end                                                                                              \n</code></pre>\n\n<h4 id=\"update\">Update</h4>\n\n<p>In an <code>update</code> action, I like to check that the fields actually changed. This has caught bugs where I've added a new field to the model, but forgot to update the white-listed parameters, so the field never actually gets updated.</p>\n\n<pre><code># test/controllers/api/posts_controller_test.rb\nclass Api::PostsControllerTest &lt; ActionController::TestCase  \n  ...\n\n  def test_update                                                                                                                                                                              \n    the_post = posts(:one)                                                                                                                                                                     \n\n    assert_no_difference \"Post.count\" do                                                                                                                                                       \n      put :update, { id: the_post.id, post: { body: 'new body', author: 'new author', user_id: 5 } }                                                                                           \n    end                                                                                                                                                                                        \n\n    assert_response :success                                                                                                                                                                   \n    assert_equal Mime::JSON, response.content_type                                                                                                                                             \n\n    the_post.reload                                                                                                                                                                            \n    assert_equal 'new body', the_post.body                                                                                                                                                     \n    assert_equal 'new author', the_post.author                                                                                                                                                 \n    assert_equal 5, the_post.user_id                                                                                                                                                           \n  end                                                                                                                                                                                          \n\n  def test_update_with_invalid_paramters                                                                                                                                                                              \n    the_post = posts(:one)                                                                                                                                                                     \n\n    assert_no_difference \"Post.count\" do                                                                                                                                                       \n      put :update, { id: the_post.id, post: { body: nil, author: nil, user_id: nil } }                                                                                                         \n    end                                                                                                                                                                                        \n\n    assert_response :unprocessable_entity                                                                                                                                                      \n    assert_equal Mime::JSON, response.content_type                                                                                                                                             \n  end\nend  \n</code></pre>\n\n<h3 id=\"serializers\">Serializers</h3>\n\n<p>The final basic test I like to do is to setup a contract of sorts around what fields are being sent back in the serializer. This helps prevent breaking the frontend by removing/renaming fields. I treat this test like a basic model test:</p>\n\n<pre><code># test/serializers/post_serializer_test.rb\nclass PostsSerializerTest &lt; ActiveSupport::TestCase  \n  def test_fields                                                                                                                        \n    serializer = Api::PostsSerializer.new(posts(:one))                                                                                   \n\n    fields = [:id, :body, :author, :user_id]                                                                                             \n    assert_equal fields, serializer.attributes.keys                                                                                      \n  end                                                                                                                                    \nend  \n</code></pre>\n\n<h2 id=\"testingthedatareturned\">Testing the data returned</h2>\n\n<p>While the tests above are definitely useful, I think they are missing something—especially in the <code>index</code> example above. We don't know what was actually sent to the client. Yes the call succeeded, but did we send the right data? Did we send any data at all? Basic tests like these don't instill confidence in me that our business logic is correct.</p>\n\n<p>In the case of the <code>index</code> action, we have a couple of options here:</p>\n\n<ol>\n<li>Parse the controller return and test the result  </li>\n<li>Move logic into model methods and test those</li>\n</ol>\n\n<h3 id=\"parsingtheresponse\">Parsing the response</h3>\n\n<p>Let's revisit the <code>index</code> test we have above. In this action we're returning all of the posts that belong to a user. By parsing the <code>response.body</code> and testing its data, we have more confidence that the data we're returning is actually correct—that the post actually belongs to the user. While I think this is not an amazing solution, it does up our level of confidence in the code:</p>\n\n<pre><code># test/controllers/api/posts_controller_test.rb\nclass Api::PostsControllerTest &lt; ActionController::TestCase  \n  def test_index                                                                                                                                                                                   \n    get :index, { user_id: users(:one).id }                                                                                                                                                        \n\n    assert_response :success                                                                                                                                                                       \n    assert_equal Mime::JSON, response.content_type                                                                                                                                                 \n\n    # Compare what the controller returned to the posts user one has.                                                                                                                              \n    json = JSON.parse(response.body)                                                                                                                                                               \n    post_json = json[\"posts\"].first                                                                                                                                                                \n\n    the_post = posts(:one)                                                                                                                                                                         \n    assert_equal the_post.id, post_json[\"id\"]                                                                                                                                                      \n    assert_equal the_post.body, post_json[\"body\"]                                                                                                                                                  \n    assert_equal the_post.author, post_json[\"author\"]                                                                                                                                              \n  end           \nend  \n</code></pre>\n\n<p>I have used this type of test in places where I wasn't using <code>ActiveModelSerializer</code> (read: <em>legacy code</em>), and in the past it has been a hint that the code is poorly structured—too much logic in the controller, or logic inside of the view (<a href=\"https://github.com/rails/jbuilder\">jbuilder</a> or AMS). But, sometimes this type of testing is better than nothing.</p>\n\n<h3 id=\"fatmodelsskinnycontrollers\">Fat Models Skinny Controllers™</h3>\n\n<p>Parsing the response body can be cumbersome. Usually you end up having to iterate over the JSON data because you've lost the ActiveRecord niceities like querying and finding.</p>\n\n<p>The approach I tend to take now is to move logic into the model, and write a model test. This simplifies the controller, but trusts that the controller is doing the simple job of requesting and returning the data. There is an element of risk here. You could <code>render json: nil</code> accidentally and forget to return the objects, but in my experience this hasn't been an issue.</p>\n\n<p>So, instead of querying the posts like this and parsing the response in the controller test to make sure we got the correct posts:</p>\n\n<p><code>@posts = Post.where(user_id: params[:user_id])</code></p>\n\n<p>We can do something like (again, trivial example but it shows the point):</p>\n\n<p><code>@posts = Post.for_user(params[:user_id])</code></p>\n\n<p>Moving the logic into the <code>for_user</code> method and out of the controller moves the burden of testing from the controller onto the model (which is much easier to test, and the new method has the possibility of re-use in the future).</p>\n\n<p>Then the tests look like this:</p>\n\n<pre><code># test/controllers/api/posts_controller_test.rb\nclass Api::PostsControllerTest &lt; ActionController::TestCase  \n  def test_index                                                                                                                                                                                   \n    get :index, { user_id: users(:one).id }                                                                                                                                                        \n\n    assert_response :success  \n    assert assigns(:posts)      # Threw this in for fun\n    assert_equal Mime::JSON, response.content_type                                                                                                                                                 \n  end\nend\n\n# test/models/post_test.rb\nclass PostTest &lt; ActiveSupport::TestCase  \n  def test_valid                                                                               \n    ...\n  end                                                                                          \n\n  def test_for_user\n    assert_equal [posts(:one)], Post.for_user(users(:one).id)\n    assert_equal [posts(:two)], Post.for_user(users(:two).id)\n  end\nend  \n</code></pre>\n\n<h3 id=\"finalthoughts\">Final thoughts</h3>\n\n<p>Even though the Rails world is \"convention over configuration\", there's still a lot of debate over what the proper convention is. These are just my experiences, and I hope something here helps you in your specific circumstance or project. </p>\n\n<p>Either way I'd love to hear thoughts or comments around this. Feel free to email me at <a href=\"&#109;&#97;&#105;&#108;&#116;&#111;:j&#x6f;&#104;&#110;&#109;&#x6f;&#115;&#101;&#x73;&#109;&#x61;n&#64;&#103;&#109;&#x61;&#105;&#108;&#46;co&#x6d;\">j&#x6f;&#104;&#110;&#109;&#x6f;&#115;&#101;&#x73;&#109;&#x61;n&#64;&#103;&#109;&#x61;&#105;&#108;&#46;co&#x6d;</a> or hit me up on twitter, <a href=\"https://twitter.com/johnmosesman\">@johnmosesman</a>.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"Testing a Rails API","meta_description":"Examples of basic guards, checks, and tests to ensure confidence and stability in your code.","author_id":1,"created_at":1457296002119,"created_by":1,"updated_at":1457296335069,"updated_by":1,"published_at":1457296193462,"published_by":1},{"id":4,"uuid":"ce56a934-558e-40e6-9461-8ea93eb02de1","title":"Stub. All. The. Things.","slug":"stub-all-the-things","markdown":"Continuing with the testing theme, one very sharp tool in your testing toolbox is stubbing. Good stubbing allows you to test one specific piece of your code while easing the pain of setup and state configuration.\n\nThe three places I've used this the most are:\n\n1. External calls\n2. Logic outside of the current context\n3. Tricky setup / state configuration\n\n### Assumes you know:\n\n* Basics of testing Rails apps\n* The concept of stubbing\n* How to use the [mocha](https://github.com/freerange/mocha) gem\n\nLeggo!\n\n## Stubbing external calls\n\nStubbing external calls is a great idea for a couple reasons:\n\n1. HTTP requests are slow and will slow down your test suite considerably.\n2. Some services don't have test environments, so you may end up burning through your allotted bandwidth or creating bad data.\n\n[Bitly](https://bitly.com/) is a service a lot of companies use, and is our first example. Say you have a class that just takes in a URL, sends it to Bitly to shorten it, and returns the shortened URL:\n\n\n```\n# app/services/bitly_service.rb\nclass BitlyService                                                     \n  def self.shorten_url(url)                                            \n    return Bitly.shorten(url)                                          \n  end                                                                  \nend                                                                 \n```\n\nWe don't want to actually send a call to Bitly every time we run our tests. So, we can stub the Bitly return:\n\n```\n# test/services/bitly_service_test.rb\nrequire 'test_helper'                                          \n                                                               \nclass BitlyServiceTest < ActiveSupport::TestCase               \n  def test_shorten_url                                         \n    Bitly.stubs(:shorten).returns(\"bit.ly/something\")          \n    assert_match /bit.ly/, BitlyService.shorten_url(\"some_url\")\n  end                                                          \nend                                                            \n```\n\nThis test is sort of trivial due to the simplicity of the method, but it does speed up our tests and would allow us to test any other logic in that method (if for example we added a `return if url.blank?` to the beginning).\n\nI know this works because in my sample project for this post I didn't even have to include the Bitly gem. I just needed a blank class to resolve the reference to the class:\n\n```\n# models/bitly.rb\nclass Bitly\nend\n```\n\n## Stubbing logic outside of the current context\n\nSwitching examples, let's say we have an `ActiveRecord` class called `Classroom`, and a classroom `has_many :students`. Let's also assume we want a method that returns the name of the best student in a class:\n\n```\n# models/classroom.rb\nclass Classroom < ActiveRecord::Base             \n  has_many :students                             \n                                                 \n  def best_student_name                          \n    student = Student.best_student_in_class(self)\n    student.name if student.present?             \n  end                                            \nend\n```\n\nWithout stubbing, we would need to setup our fixtures in a way that we know which student was going to be returned as the \"best\" one. In some cases that may not be very hard, but let's say the \"best\" student is a combination of the highest grades, best attendance, most class participation, etc. In other words, more logic than we would want to set up and maintain through fixtures.\n\nTo keep this test focused on what the `Classroom` object does with the _result_ of the `best_student_in_class` method and not _how_ that method works, we can look at what we're expecting to get back, and stub the return as that. From the example above, we expect to get a `Student` object back with a property or method of `name`.\n\nUsing mocha, we can stub the return of this method as an object that also stubs the method `name`:\n\n`Student.stubs(:best_student_in_class).returns(stub(name: \"jimmy\"))`\n\nWe can also use the `with()` keyword to tie specific arguments to specific results. This allows us to test the filled classroom and the empty classroom case:\n\n```\n# test/models/classroom_test.rb\nclass ClassroomTest < ActiveSupport::TestCase\n  def test_best_student\n    populated_classroom = classrooms(:one)\n    empty_classroom = classrooms(:two)\n    \n    Student.stubs(:best_student_in_class).with(populated_classroom).returns(stub(name: \"jimmy\"))\n    Student.stubs(:best_student_in_class).with(empty_classroom).returns(nil)\n\n    assert_equal \"jimmy\", populated_classroom.best_student_name\n    assert_equal nil, empty_classroom.best_student_name\n  end\nend\n```\n\n(It's neat that this works and my `Student` class is empty. :))\n\n## Stubbing tricky setups\n\nNext, let's say we want to make a `size` method on `Classroom` that returns small, medium, or large based on the number of students in the classroom:\n\n```\n# models/classroom.rb\nclass Classroom < ActiveRecord::Base             \n  has_many :students                             \n\n  ...\n                                                   \n  def size                                       \n    number_of_students = self.students.count     \n                                                 \n    case number_of_students                      \n    when 0..25                                   \n      \"small\"                                    \n    when 26..50                                  \n      \"medium\"                                   \n    else                                         \n      \"large\"                                    \n    end                                          \n  end                                            \nend                                              \n```\n\nThe method is simple enough: based on the number of students, return a string. \n\nTesting this for the small case is easy. Make a classroom fixture, a student fixture, and call the method: `assert_equal \"small\", classrooms(one).size`.\n\nNow for the medium/large case. Some options:\n\n1. Don't test it (bad)\n2. Use a junior dev to create 50 fixtures (fixture bloat and poor use of time)\n3. Create 50 objects in the test (slow and against best practices)\n4. Sweet sweet stubbing. (aw yisss)\n\nSimilar to the example above where we stubbed a student, and further stubbed a property on the student (`name`), we can stub the `students` association and the `count` method:\n\n```\n# test/models/classroom_test.rb\nclass ClassroomTest < ActiveSupport::TestCase\n  def test_size\n    classroom = classrooms(:one)\n\n    classroom.stubs(:students).returns([1, 2])\n    assert_equal \"small\", classroom.size\n\n    classroom.stubs(:students).returns(stub(count: 40))\n    assert_equal \"medium\", classroom.size\n\n    classroom.stubs(:students).returns(stub(count: 100))\n    assert_equal \"large\", classroom.size\n  end\nend\n```\n\nEasy enough!\n\n### Bonus: `any_instance`\n\nIn the examples above, we stubbed the method right onto our fixture and called a method on that object later in the test. But sometimes you may not have access to the actual object you want to stub. It might be created or referenced in the middle of the test and done away with afterwards.\n\nIn those cases, `mocha` comes with a handy method called `any_instance`. Just as it sounds, any object created of that type will have the various stubbings applied to them. \n\nExample: `Student.any_instance.stubs(:name).returns(\"bill\")`. With that line, all students will be named `bill`.\n\nFrom my personal experience, tons of`any_instance` use is a code smell. This might mean that the code is not structured well. If it's difficult to test individual concerns, then it's a possibility that the code is all one mangled mess. Again not always, but sometimes.\n\n## Conclusion\n    \nAs always you can find me at <johnmosesman@gmail.com> or [@johnmosesman](https://twitter.com/johnmosesman).\n","html":"<p>Continuing with the testing theme, one very sharp tool in your testing toolbox is stubbing. Good stubbing allows you to test one specific piece of your code while easing the pain of setup and state configuration.</p>\n\n<p>The three places I've used this the most are:</p>\n\n<ol>\n<li>External calls  </li>\n<li>Logic outside of the current context  </li>\n<li>Tricky setup / state configuration</li>\n</ol>\n\n<h3 id=\"assumesyouknow\">Assumes you know:</h3>\n\n<ul>\n<li>Basics of testing Rails apps</li>\n<li>The concept of stubbing</li>\n<li>How to use the <a href=\"https://github.com/freerange/mocha\">mocha</a> gem</li>\n</ul>\n\n<p>Leggo!</p>\n\n<h2 id=\"stubbingexternalcalls\">Stubbing external calls</h2>\n\n<p>Stubbing external calls is a great idea for a couple reasons:</p>\n\n<ol>\n<li>HTTP requests are slow and will slow down your test suite considerably.  </li>\n<li>Some services don't have test environments, so you may end up burning through your allotted bandwidth or creating bad data.</li>\n</ol>\n\n<p><a href=\"https://bitly.com/\">Bitly</a> is a service a lot of companies use, and is our first example. Say you have a class that just takes in a URL, sends it to Bitly to shorten it, and returns the shortened URL:</p>\n\n<pre><code># app/services/bitly_service.rb\nclass BitlyService  \n  def self.shorten_url(url)                                            \n    return Bitly.shorten(url)                                          \n  end                                                                  \nend  \n</code></pre>\n\n<p>We don't want to actually send a call to Bitly every time we run our tests. So, we can stub the Bitly return:</p>\n\n<pre><code># test/services/bitly_service_test.rb\nrequire 'test_helper'                                          \n\nclass BitlyServiceTest &lt; ActiveSupport::TestCase  \n  def test_shorten_url                                         \n    Bitly.stubs(:shorten).returns(\"bit.ly/something\")          \n    assert_match /bit.ly/, BitlyService.shorten_url(\"some_url\")\n  end                                                          \nend  \n</code></pre>\n\n<p>This test is sort of trivial due to the simplicity of the method, but it does speed up our tests and would allow us to test any other logic in that method (if for example we added a <code>return if url.blank?</code> to the beginning).</p>\n\n<p>I know this works because in my sample project for this post I didn't even have to include the Bitly gem. I just needed a blank class to resolve the reference to the class:</p>\n\n<pre><code># models/bitly.rb\nclass Bitly  \nend  \n</code></pre>\n\n<h2 id=\"stubbinglogicoutsideofthecurrentcontext\">Stubbing logic outside of the current context</h2>\n\n<p>Switching examples, let's say we have an <code>ActiveRecord</code> class called <code>Classroom</code>, and a classroom <code>has_many :students</code>. Let's also assume we want a method that returns the name of the best student in a class:</p>\n\n<pre><code># models/classroom.rb\nclass Classroom &lt; ActiveRecord::Base  \n  has_many :students                             \n\n  def best_student_name                          \n    student = Student.best_student_in_class(self)\n    student.name if student.present?             \n  end                                            \nend  \n</code></pre>\n\n<p>Without stubbing, we would need to setup our fixtures in a way that we know which student was going to be returned as the \"best\" one. In some cases that may not be very hard, but let's say the \"best\" student is a combination of the highest grades, best attendance, most class participation, etc. In other words, more logic than we would want to set up and maintain through fixtures.</p>\n\n<p>To keep this test focused on what the <code>Classroom</code> object does with the <em>result</em> of the <code>best_student_in_class</code> method and not <em>how</em> that method works, we can look at what we're expecting to get back, and stub the return as that. From the example above, we expect to get a <code>Student</code> object back with a property or method of <code>name</code>.</p>\n\n<p>Using mocha, we can stub the return of this method as an object that also stubs the method <code>name</code>:</p>\n\n<p><code>Student.stubs(:best_student_in_class).returns(stub(name: \"jimmy\"))</code></p>\n\n<p>We can also use the <code>with()</code> keyword to tie specific arguments to specific results. This allows us to test the filled classroom and the empty classroom case:</p>\n\n<pre><code># test/models/classroom_test.rb\nclass ClassroomTest &lt; ActiveSupport::TestCase  \n  def test_best_student\n    populated_classroom = classrooms(:one)\n    empty_classroom = classrooms(:two)\n\n    Student.stubs(:best_student_in_class).with(populated_classroom).returns(stub(name: \"jimmy\"))\n    Student.stubs(:best_student_in_class).with(empty_classroom).returns(nil)\n\n    assert_equal \"jimmy\", populated_classroom.best_student_name\n    assert_equal nil, empty_classroom.best_student_name\n  end\nend  \n</code></pre>\n\n<p>(It's neat that this works and my <code>Student</code> class is empty. :))</p>\n\n<h2 id=\"stubbingtrickysetups\">Stubbing tricky setups</h2>\n\n<p>Next, let's say we want to make a <code>size</code> method on <code>Classroom</code> that returns small, medium, or large based on the number of students in the classroom:</p>\n\n<pre><code># models/classroom.rb\nclass Classroom &lt; ActiveRecord::Base  \n  has_many :students                             \n\n  ...\n\n  def size                                       \n    number_of_students = self.students.count     \n\n    case number_of_students                      \n    when 0..25                                   \n      \"small\"                                    \n    when 26..50                                  \n      \"medium\"                                   \n    else                                         \n      \"large\"                                    \n    end                                          \n  end                                            \nend  \n</code></pre>\n\n<p>The method is simple enough: based on the number of students, return a string. </p>\n\n<p>Testing this for the small case is easy. Make a classroom fixture, a student fixture, and call the method: <code>assert_equal \"small\", classrooms(one).size</code>.</p>\n\n<p>Now for the medium/large case. Some options:</p>\n\n<ol>\n<li>Don't test it (bad)  </li>\n<li>Use a junior dev to create 50 fixtures (fixture bloat and poor use of time)  </li>\n<li>Create 50 objects in the test (slow and against best practices)  </li>\n<li>Sweet sweet stubbing. (aw yisss)</li>\n</ol>\n\n<p>Similar to the example above where we stubbed a student, and further stubbed a property on the student (<code>name</code>), we can stub the <code>students</code> association and the <code>count</code> method:</p>\n\n<pre><code># test/models/classroom_test.rb\nclass ClassroomTest &lt; ActiveSupport::TestCase  \n  def test_size\n    classroom = classrooms(:one)\n\n    classroom.stubs(:students).returns([1, 2])\n    assert_equal \"small\", classroom.size\n\n    classroom.stubs(:students).returns(stub(count: 40))\n    assert_equal \"medium\", classroom.size\n\n    classroom.stubs(:students).returns(stub(count: 100))\n    assert_equal \"large\", classroom.size\n  end\nend  \n</code></pre>\n\n<p>Easy enough!</p>\n\n<h3 id=\"bonusany_instance\">Bonus: <code>any_instance</code></h3>\n\n<p>In the examples above, we stubbed the method right onto our fixture and called a method on that object later in the test. But sometimes you may not have access to the actual object you want to stub. It might be created or referenced in the middle of the test and done away with afterwards.</p>\n\n<p>In those cases, <code>mocha</code> comes with a handy method called <code>any_instance</code>. Just as it sounds, any object created of that type will have the various stubbings applied to them. </p>\n\n<p>Example: <code>Student.any_instance.stubs(:name).returns(\"bill\")</code>. With that line, all students will be named <code>bill</code>.</p>\n\n<p>From my personal experience, tons of<code>any_instance</code> use is a code smell. This might mean that the code is not structured well. If it's difficult to test individual concerns, then it's a possibility that the code is all one mangled mess. Again not always, but sometimes.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>As always you can find me at <a href=\"&#x6d;a&#105;&#x6c;&#x74;&#x6f;:&#x6a;&#x6f;&#104;&#110;&#x6d;&#x6f;&#x73;&#101;&#x73;&#x6d;a&#110;&#64;&#x67;m&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;\">&#x6a;&#x6f;&#104;&#110;&#x6d;&#x6f;&#x73;&#101;&#x73;&#x6d;a&#110;&#64;&#x67;m&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;</a> or <a href=\"https://twitter.com/johnmosesman\">@johnmosesman</a>.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"Stub. All. The. Things.","meta_description":"Three ways to speed up your test suite, isolate and test specific parts of your code, and remove the hassle of test setup through stubbing with the mocha gem.","author_id":1,"created_at":1457924292126,"created_by":1,"updated_at":1457973451676,"updated_by":1,"published_at":1457924472024,"published_by":1},{"id":6,"uuid":"07fd094a-7934-4da3-9d24-71ecbf57851b","title":"Things I Learned At My First Startup","slug":"things-i-learned-at-my-first-startup","markdown":"Working at a startup offers tremendous opportunities for growth and personal development. The pace, energy, and atmosphere is exciting and makes weeks and eventually months fly by. We try our best, but of course we make some mistakes (ok or a lot of mistakes).\n\nMost of us have read about the common pitfalls startups run into: hiring too soon, not validating their users' needs, investor issues, etc. Below are a few (of the many) things I learned—even though I've read and been warned about these things in the past. Sometimes you just have to learn things the hard way.\n\n## Lesson #1: Build for today, not tomorrow.\nYou're an engineer. You love to build things. You love to build clever solutions to things. Here is a classic mistake:\n\n*Manager Bob:* Hey I need you to build `Some Feature`.\n\n*You*: Yeah! I can totally build `Some Feature`.\n\n*You*: Even though we only need `Some Feature` today, very soon we'll need `Some Feature 2.0`. I can add some *clever flexibility* into this right now so when `Some Feature 2.0` comes along it will be trivial! I am so smart.\n\nNo. Nonononono. Don't overbuild. Cover the existing requirements and the existing requirements *only*. After being bitten by this several times, I will try my hardest to never do this again. Especially in the startup world, where speed and agility are absolutely vital, spending any extra time building something you probably won't need while at the same time complicating the system is very bad. \n\nI have built in extra flexibility for a new feature **slated for development the very next week only to have that feature chopped**—leaving junior developers very confused with the code because I premptively decided to make it a polymorphic association with a generic \"data\" field that housed auxilliary data. Was that a great design in the first place? Probably not, but we had to live with it **for the entirety of the app.** And also, `Some Feature 2.0` never came along.\n\n## Lesson #2: \"Work on the hard problems\" \n\nIn most work environments, but especially in startups, there are always a million things to do. The challenge is prioritization, and it comes down to this: *always work on the hard problems*.\n\nIt is all too easy to fill a day or even a week with things that keep you busy—things that *feel productive*, but really do not move the needle of your success.\n\nI stole this phrase partially from Seth Godin in his [Startup School Podcast](https://itunes.apple.com/us/podcast/seth-godins-startup-school/id566985370?mt=2) (my all-time favorite podcast for business/entrepreneurship). He said in one episode, if you're starting a business, the hard part of your business is not what your webpage looks like, or if you have the perfect logo—it's getting your customers to notice you and buy what you are selling.\n\nIt's very easy to focus on the things we're good at—the things we know how to do. Working on hard problems is hard. It's not fun. It's searching in the unknown, and it's kinda scary at times. But those are the problems that will actually propel our projects forward.\n\nThat's not to say you shouldn't do things like respond to customers, ensure code quality and test coverage stay in good spots, but that the majority of your day should be solving problems *only you have the potential to solve.*\n\n(Quote partial credit: [@ryanlabouve](https://twitter.com/RyanLaBouve))\n\n## Lesson 3: Work smarter, not harder\n\nA cliché, but soooooooo true. A friend of mine sent me [this post](https://medium.com/digital-nomad-stories/the-cult-of-work-you-never-meant-to-join-cd965fb9ea1a#.3k3vlyyxu) recently about how overworking has become a badge of honor in our culture and ultimately reduces our productivity. I highly recommend you read it.\n\n### 40+ hours per week\n\n80 hour work weeks. Sleeping at the office. Neglecting friends, family, exercising, hobbies, etc. I'm not saying we shouldn't work hard—we should—but outside of the occasional (and by occasional I mean *very occasional*) week or weekend when you need to grind it out, consistent times like this are almost always a symptom of a massive problem in another area. \n\nIt is so hard to do, but ask yourself, *why* are we doing this? Here's some common causes I've found, and each one of these goes directly against the startup mindset of iterating quickly based on feedback.\n\n#### Poorly defined scope of work\n\n\"So we have our sprint...and we have the list of prioritized things to be done...so just drag everything into the sprint! Prioritization! Done!\"\n\n#### Vastly overestimating what you actually need\n\n* \"We HAVE to have this feature or we can't get clients.\"\n\nIf that is true, you have drastically missed on product/market fit, and need to be cutting everything else you can to re-align your product—not adding more. (But chances are, you don't actually need what you think you need.) \n\n* \"Client X / Our biggest client will leave us if we don't do this.\"\n\nThis is rarely the case, and in the cases where it is true you probably don't want that client anyways! They will be more trouble than they're worth.\n\n* \"We HAVE to show/demonstrate/have Features X, Y, and Z or ABC will happen.\"\n\nYou probably don't have to have those features. Showing less or showing a roadmap will do just fine. And similarly to if you \"have\" to have a feature, if you're that far off the mark, cut everything but that one feature.\n\n#### Wavering company direction\n\nSometimes, when the workload is ever increasing or the string of deadlines are unmanageable, it could mean you're pursuing multiple directions. You can't entertain growing your customer base, acquisition, and conferences at the same time. Trying to sprint towards two different locations will lead to not arriving at either.\n\n#### Deathmarching\n\nIn *all* of the cases where I've deathmarched, there was a simpler and better solution sitting right there all along. Deathmarching hurts in many ways. Team morale suffers, the product suffers, and a general toxicity starts to creep in.\n\n**A deathmarch is your greatest canary in the coalmine for organizational health.**\n\n## Lesson #4: \"It's only as complicated as you make it.\" \n\n(Quote via [@datachomp](https://twitter.com/DataChomp))\n\nProcesses, company affairs, features, implementations—it really is only as complicated as you make it. Simple is better.\n\n## Conclusion\n    \nI hope you can learn from my mistakes and not have to make the same ones yourself. As always, feedback is welcomed at <johnmosesman@gmail.com> or [@johnmosesman](https://twitter.com/johnmosesman). Happy Startuping!","html":"<p>Working at a startup offers tremendous opportunities for growth and personal development. The pace, energy, and atmosphere is exciting and makes weeks and eventually months fly by. We try our best, but of course we make some mistakes (ok or a lot of mistakes).</p>\n\n<p>Most of us have read about the common pitfalls startups run into: hiring too soon, not validating their users' needs, investor issues, etc. Below are a few (of the many) things I learned—even though I've read and been warned about these things in the past. Sometimes you just have to learn things the hard way.</p>\n\n<h2 id=\"lesson1buildfortodaynottomorrow\">Lesson #1: Build for today, not tomorrow.</h2>\n\n<p>You're an engineer. You love to build things. You love to build clever solutions to things. Here is a classic mistake:</p>\n\n<p><em>Manager Bob:</em> Hey I need you to build <code>Some Feature</code>.</p>\n\n<p><em>You</em>: Yeah! I can totally build <code>Some Feature</code>.</p>\n\n<p><em>You</em>: Even though we only need <code>Some Feature</code> today, very soon we'll need <code>Some Feature 2.0</code>. I can add some <em>clever flexibility</em> into this right now so when <code>Some Feature 2.0</code> comes along it will be trivial! I am so smart.</p>\n\n<p>No. Nonononono. Don't overbuild. Cover the existing requirements and the existing requirements <em>only</em>. After being bitten by this several times, I will try my hardest to never do this again. Especially in the startup world, where speed and agility are absolutely vital, spending any extra time building something you probably won't need while at the same time complicating the system is very bad. </p>\n\n<p>I have built in extra flexibility for a new feature <strong>slated for development the very next week only to have that feature chopped</strong>—leaving junior developers very confused with the code because I premptively decided to make it a polymorphic association with a generic \"data\" field that housed auxilliary data. Was that a great design in the first place? Probably not, but we had to live with it <strong>for the entirety of the app.</strong> And also, <code>Some Feature 2.0</code> never came along.</p>\n\n<h2 id=\"lesson2workonthehardproblems\">Lesson #2: \"Work on the hard problems\"</h2>\n\n<p>In most work environments, but especially in startups, there are always a million things to do. The challenge is prioritization, and it comes down to this: <em>always work on the hard problems</em>.</p>\n\n<p>It is all too easy to fill a day or even a week with things that keep you busy—things that <em>feel productive</em>, but really do not move the needle of your success.</p>\n\n<p>I stole this phrase partially from Seth Godin in his <a href=\"https://itunes.apple.com/us/podcast/seth-godins-startup-school/id566985370?mt=2\">Startup School Podcast</a> (my all-time favorite podcast for business/entrepreneurship). He said in one episode, if you're starting a business, the hard part of your business is not what your webpage looks like, or if you have the perfect logo—it's getting your customers to notice you and buy what you are selling.</p>\n\n<p>It's very easy to focus on the things we're good at—the things we know how to do. Working on hard problems is hard. It's not fun. It's searching in the unknown, and it's kinda scary at times. But those are the problems that will actually propel our projects forward.</p>\n\n<p>That's not to say you shouldn't do things like respond to customers, ensure code quality and test coverage stay in good spots, but that the majority of your day should be solving problems <em>only you have the potential to solve.</em></p>\n\n<p>(Quote partial credit: <a href=\"https://twitter.com/RyanLaBouve\">@ryanlabouve</a>)</p>\n\n<h2 id=\"lesson3worksmarternotharder\">Lesson 3: Work smarter, not harder</h2>\n\n<p>A cliché, but soooooooo true. A friend of mine sent me <a href=\"https://medium.com/digital-nomad-stories/the-cult-of-work-you-never-meant-to-join-cd965fb9ea1a#.3k3vlyyxu\">this post</a> recently about how overworking has become a badge of honor in our culture and ultimately reduces our productivity. I highly recommend you read it.</p>\n\n<h3 id=\"40hoursperweek\">40+ hours per week</h3>\n\n<p>80 hour work weeks. Sleeping at the office. Neglecting friends, family, exercising, hobbies, etc. I'm not saying we shouldn't work hard—we should—but outside of the occasional (and by occasional I mean <em>very occasional</em>) week or weekend when you need to grind it out, consistent times like this are almost always a symptom of a massive problem in another area. </p>\n\n<p>It is so hard to do, but ask yourself, <em>why</em> are we doing this? Here's some common causes I've found, and each one of these goes directly against the startup mindset of iterating quickly based on feedback.</p>\n\n<h4 id=\"poorlydefinedscopeofwork\">Poorly defined scope of work</h4>\n\n<p>\"So we have our sprint...and we have the list of prioritized things to be done...so just drag everything into the sprint! Prioritization! Done!\"</p>\n\n<h4 id=\"vastlyoverestimatingwhatyouactuallyneed\">Vastly overestimating what you actually need</h4>\n\n<ul>\n<li>\"We HAVE to have this feature or we can't get clients.\"</li>\n</ul>\n\n<p>If that is true, you have drastically missed on product/market fit, and need to be cutting everything else you can to re-align your product—not adding more. (But chances are, you don't actually need what you think you need.) </p>\n\n<ul>\n<li>\"Client X / Our biggest client will leave us if we don't do this.\"</li>\n</ul>\n\n<p>This is rarely the case, and in the cases where it is true you probably don't want that client anyways! They will be more trouble than they're worth.</p>\n\n<ul>\n<li>\"We HAVE to show/demonstrate/have Features X, Y, and Z or ABC will happen.\"</li>\n</ul>\n\n<p>You probably don't have to have those features. Showing less or showing a roadmap will do just fine. And similarly to if you \"have\" to have a feature, if you're that far off the mark, cut everything but that one feature.</p>\n\n<h4 id=\"waveringcompanydirection\">Wavering company direction</h4>\n\n<p>Sometimes, when the workload is ever increasing or the string of deadlines are unmanageable, it could mean you're pursuing multiple directions. You can't entertain growing your customer base, acquisition, and conferences at the same time. Trying to sprint towards two different locations will lead to not arriving at either.</p>\n\n<h4 id=\"deathmarching\">Deathmarching</h4>\n\n<p>In <em>all</em> of the cases where I've deathmarched, there was a simpler and better solution sitting right there all along. Deathmarching hurts in many ways. Team morale suffers, the product suffers, and a general toxicity starts to creep in.</p>\n\n<p><strong>A deathmarch is your greatest canary in the coalmine for organizational health.</strong></p>\n\n<h2 id=\"lesson4itsonlyascomplicatedasyoumakeit\">Lesson #4: \"It's only as complicated as you make it.\"</h2>\n\n<p>(Quote via <a href=\"https://twitter.com/DataChomp\">@datachomp</a>)</p>\n\n<p>Processes, company affairs, features, implementations—it really is only as complicated as you make it. Simple is better.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>I hope you can learn from my mistakes and not have to make the same ones yourself. As always, feedback is welcomed at <a href=\"&#x6d;&#x61;&#x69;&#108;&#116;&#111;:&#x6a;&#x6f;&#x68;&#110;&#x6d;&#111;&#115;&#x65;&#115;&#x6d;&#x61;&#110;&#64;&#x67;&#x6d;&#97;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;\">&#x6a;&#x6f;&#x68;&#110;&#x6d;&#111;&#115;&#x65;&#115;&#x6d;&#x61;&#110;&#64;&#x67;&#x6d;&#97;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a> or <a href=\"https://twitter.com/johnmosesman\">@johnmosesman</a>. Happy Startuping!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"","meta_description":"Three lessons I learned from working at my first startup. May you learn from them and not have to learn the hard way like I did.","author_id":1,"created_at":1463503427273,"created_by":1,"updated_at":1463518702193,"updated_by":1,"published_at":1463503527386,"published_by":1},{"id":7,"uuid":"4616b613-cedc-4116-8e7d-10054ca74061","title":"About Me","slug":"about","markdown":"<img src=\"https://pbs.twimg.com/profile_images/648904252534845441/qxNaSibP.jpg\" width=\"250px\" height=\"250px\" style=\"text-align: center; border-radius: 250px\">\n\nHello!\n\nMy name is John, and I am a full-stack developer focusing on Rails and Ember apps. This blog is a way for me to post things I've learned or experienced about software development. I also [tweet](https://twitter.com/johnmosesman) about development-related things—or just things I find funny.\n\nWhen I'm not coding, I enjoy spending time with my wife, being an amateur powerlifter, trying to become [Better Than Average™](http://betterthanaverage.io), and playing video games (probably a little too much).\n\nI've been in a wide variety of jobs from corporate to startup, but currently I do consulting for businesses looking for a new app or an expansion of an existing one. If you'd like to work with me, say hello at [johnmosesman@gmail.com](mailto:johnmosesman@gmail.com?subject=Hello!)!\n\nHere are some examples of other people's experiences working with me:\n\n> \"John is a great developer. He consistently delivers high-quality software and does a fantastic job of putting himself in the user's shoes, and asking the right questions, that pushes features beyond what they could have been.\"\n>\n> \\- Scott Lesser, Senior Web Developer, Life.Church\n\n<div/>\n\n> \"John works on our client's industry-leading B2B app for Optical LAN network management. John's outstanding technical proficiency in back-end solution delivery using Ruby on Rails on our project is matched by his personal character which inspires increased mutual trust and respect with every interaction. It continues to be a delight working with John and I look forward to working with him and learning from him far beyond our current projects.\"\n>\n> \\- Ola Adedoyin, CTO, Altamium Business Apps\n\nI've also given a few talks at Ruby and JS meetups. You can view those [here](https://github.com/johnmosesman/talks).\n\nThanks for reading!","html":"<p><img src=\"https://pbs.twimg.com/profile_images/648904252534845441/qxNaSibP.jpg\" width=\"250px\" height=\"250px\" style=\"text-align: center; border-radius: 250px\"></p>\n\n<p>Hello!</p>\n\n<p>My name is John, and I am a full-stack developer focusing on Rails and Ember apps. This blog is a way for me to post things I've learned or experienced about software development. I also <a href=\"https://twitter.com/johnmosesman\">tweet</a> about development-related things—or just things I find funny.</p>\n\n<p>When I'm not coding, I enjoy spending time with my wife, being an amateur powerlifter, trying to become <a href=\"http://betterthanaverage.io\">Better Than Average™</a>, and playing video games (probably a little too much).</p>\n\n<p>I've been in a wide variety of jobs from corporate to startup, but currently I do consulting for businesses looking for a new app or an expansion of an existing one. If you'd like to work with me, say hello at <a href=\"mailto:johnmosesman@gmail.com?subject=Hello!\">johnmosesman@gmail.com</a>!</p>\n\n<p>Here are some examples of other people's experiences working with me:</p>\n\n<blockquote>\n  <p>\"John is a great developer. He consistently delivers high-quality software and does a fantastic job of putting himself in the user's shoes, and asking the right questions, that pushes features beyond what they could have been.\"</p>\n  \n  <p>- Scott Lesser, Senior Web Developer, Life.Church</p>\n</blockquote>\n\n<p><div/></p>\n\n<blockquote>\n  <p>\"John works on our client's industry-leading B2B app for Optical LAN network management. John's outstanding technical proficiency in back-end solution delivery using Ruby on Rails on our project is matched by his personal character which inspires increased mutual trust and respect with every interaction. It continues to be a delight working with John and I look forward to working with him and learning from him far beyond our current projects.\"</p>\n  \n  <p>- Ola Adedoyin, CTO, Altamium Business Apps</p>\n</blockquote>\n\n<p>I've also given a few talks at Ruby and JS meetups. You can view those <a href=\"https://github.com/johnmosesman/talks\">here</a>.</p>\n\n<p>Thanks for reading!</p>","image":null,"featured":0,"page":1,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1471195357536,"created_by":1,"updated_at":1472836150067,"updated_by":1,"published_at":1471195430994,"published_by":1},{"id":8,"uuid":"ead4900c-c653-45d7-9134-d5197b34c818","title":"Rails vs Phoenix: MVC","slug":"rails-vs-phoenix-mvc","markdown":"As I was beginning to read and learn about the [Elixir](http://elixir-lang.org/)/[Phoenix](http://www.phoenixframework.org/) world, I stumbled across [this talk](https://www.youtube.com/watch?v=3LiLjVCDEpU) at the Elixir Warsaw Meetup by José Valim, the creator of Elixir.\n\nIn this talk he's giving a high-level overview about the benefits of using Phoenix: the productivity benefits we're accustomed to from Rails, and the performance of the underlying Erlang runtime.\n\nWhile I was watching it, there was a slide where he talked about Phoenix's MVC pattern, and he showed this image (at [26:05](https://youtu.be/3LiLjVCDEpU?t=26m5s)):\n\n<img src=\"https://raw.githubusercontent.com/johnmosesman/blog/master/elixir_separation_concerns/phoenix_mvc.png\" width=\"400\" height=\"400\">\n\nI noticed that the controller was the center point of the image. The controller would reach out to the \"leaf\" nodes—none of the leaf nodes are connected.\n\nThe typical MVC diagram I'm used to seeing is more of a triangle. It usually looks something like this:\n\n<img src=\"https://raw.githubusercontent.com/johnmosesman/blog/master/elixir_separation_concerns/classic_mvc.png\" alt=\"http://stackoverflow.com/questions/6873469/delphi-7-trying-to-understand-the-mvc-pattern\" width=\"400\" height=\"400\">\n\nHere the nodes are all interconnected.\n\nWhen José was talking about the first image above he said this:\n\n> \"Functional programmers like to split side-effects—things that change the world around you...side-effects is where the complexity in our applications exist.\"\n\nWhen he said this, it made me think of many of the Rails apps I've encountered. Usually they look something like this:\n\n```\nclass SomeController < ApplicationController\n  def blah\n    @model = ...\n    @model.perform_side_effects\n    render ...\n  end\nend\n\nclass Model < ActiveRecord::Base\n  def perform_side_effects\n    self.some_association.perform_side_effects\n  end\nend\n\nclass SomeAssociation < ActiveRecord::Base\n  def perform_side_effects\n    do_the_actual_work\n  end\n  \n  private\n    def do_the_actual_work\n      update_attributes(...)\n    end\nend\n```\n\nIn the controller action we find the model, and then call a model method to do the work (after all, you do practice _Fat Models Skinny Controllers™_ don't you??).\n\nThat model method calls another method, which calls another method, which calls a private method that finally does the \"side-effect.\" Sometimes, the method calls can nest three or four times deep (especially as the app grows in size).\n\n## Read- and Maintain-ability\n\nArugably the most difficult part of software is reading (and understanding) someone else's code, and then being able to maintain that code effectively.\n\nI'm starting to think that the Phoenix pattern would be an excellent thing to bring into my Rails apps. If only the controllers produced side-effects, it would be very easy to read through the controller action and see _what is actually going to change._\n\nIf all change happens in controllers, the Rails models would become more like a functional programming language's modules—independent functions that transform data without persisting side-effects. That sounds easier to use, compose, and test.\n\nWhile I'm sure I'm not the first person to think this, it is something I'm going to implement moving forward—whether I'm in Rails or Phoenix land.","html":"<p>As I was beginning to read and learn about the <a href=\"http://elixir-lang.org/\">Elixir</a>/<a href=\"http://www.phoenixframework.org/\">Phoenix</a> world, I stumbled across <a href=\"https://www.youtube.com/watch?v=3LiLjVCDEpU\">this talk</a> at the Elixir Warsaw Meetup by José Valim, the creator of Elixir.</p>\n\n<p>In this talk he's giving a high-level overview about the benefits of using Phoenix: the productivity benefits we're accustomed to from Rails, and the performance of the underlying Erlang runtime.</p>\n\n<p>While I was watching it, there was a slide where he talked about Phoenix's MVC pattern, and he showed this image (at <a href=\"https://youtu.be/3LiLjVCDEpU?t=26m5s\">26:05</a>):</p>\n\n<p><img src=\"https://raw.githubusercontent.com/johnmosesman/blog/master/elixir_separation_concerns/phoenix_mvc.png\" width=\"400\" height=\"400\"></p>\n\n<p>I noticed that the controller was the center point of the image. The controller would reach out to the \"leaf\" nodes—none of the leaf nodes are connected.</p>\n\n<p>The typical MVC diagram I'm used to seeing is more of a triangle. It usually looks something like this:</p>\n\n<p><img src=\"https://raw.githubusercontent.com/johnmosesman/blog/master/elixir_separation_concerns/classic_mvc.png\" alt=\"http://stackoverflow.com/questions/6873469/delphi-7-trying-to-understand-the-mvc-pattern\" width=\"400\" height=\"400\"></p>\n\n<p>Here the nodes are all interconnected.</p>\n\n<p>When José was talking about the first image above he said this:</p>\n\n<blockquote>\n  <p>\"Functional programmers like to split side-effects—things that change the world around you...side-effects is where the complexity in our applications exist.\"</p>\n</blockquote>\n\n<p>When he said this, it made me think of many of the Rails apps I've encountered. Usually they look something like this:</p>\n\n<pre><code>class SomeController &lt; ApplicationController  \n  def blah\n    @model = ...\n    @model.perform_side_effects\n    render ...\n  end\nend\n\nclass Model &lt; ActiveRecord::Base  \n  def perform_side_effects\n    self.some_association.perform_side_effects\n  end\nend\n\nclass SomeAssociation &lt; ActiveRecord::Base  \n  def perform_side_effects\n    do_the_actual_work\n  end\n\n  private\n    def do_the_actual_work\n      update_attributes(...)\n    end\nend  \n</code></pre>\n\n<p>In the controller action we find the model, and then call a model method to do the work (after all, you do practice <em>Fat Models Skinny Controllers™</em> don't you??).</p>\n\n<p>That model method calls another method, which calls another method, which calls a private method that finally does the \"side-effect.\" Sometimes, the method calls can nest three or four times deep (especially as the app grows in size).</p>\n\n<h2 id=\"readandmaintainability\">Read- and Maintain-ability</h2>\n\n<p>Arugably the most difficult part of software is reading (and understanding) someone else's code, and then being able to maintain that code effectively.</p>\n\n<p>I'm starting to think that the Phoenix pattern would be an excellent thing to bring into my Rails apps. If only the controllers produced side-effects, it would be very easy to read through the controller action and see <em>what is actually going to change.</em></p>\n\n<p>If all change happens in controllers, the Rails models would become more like a functional programming language's modules—independent functions that transform data without persisting side-effects. That sounds easier to use, compose, and test.</p>\n\n<p>While I'm sure I'm not the first person to think this, it is something I'm going to implement moving forward—whether I'm in Rails or Phoenix land.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"Rails vs Phoenix MVC","meta_description":"Rethinking controllers as the source of change, and the benefits that gives to the rest of the system.","author_id":1,"created_at":1473183760253,"created_by":1,"updated_at":1473184416697,"updated_by":1,"published_at":1473184044826,"published_by":1}],"users":[{"id":1,"uuid":"43f1400d-b5a4-41da-95e6-c2f7c6a57beb","name":"John Mosesman","slug":"johnmosesman","password":"$2a$10$q2Ef3l6sT/PwTRGfBqpB9OjMFI7hMPU0mZQlKT33Y/br6AVKs9Yii","email":"johnmosesman@gmail.com","image":"//www.gravatar.com/avatar/bdf1bdc67410b78d6b82cc2c068d5957?s=250&d=mm&r=x","cover":null,"bio":"Christ follower, husband, full-stack developer, and learner of Ruby, Rails, and Ember.js. Eyeing that shiny thing called Elixir/Phoenix...","website":null,"location":"OKC, OK","accessibility":null,"status":"active","language":"en_US","meta_title":null,"meta_description":null,"tour":null,"last_login":1472835346362,"created_at":1448770472365,"created_by":1,"updated_at":1472835346363,"updated_by":1}],"roles":[{"id":1,"uuid":"08013e20-dd13-4f9a-ba76-2c42fe28c471","name":"Administrator","description":"Administrators","created_at":1448770471201,"created_by":1,"updated_at":1448770471201,"updated_by":1},{"id":2,"uuid":"dff2b789-9624-4f0f-87ea-150402362863","name":"Editor","description":"Editors","created_at":1448770471202,"created_by":1,"updated_at":1448770471202,"updated_by":1},{"id":3,"uuid":"1ecb4bab-c54d-40d0-a128-d275a84b951c","name":"Author","description":"Authors","created_at":1448770471203,"created_by":1,"updated_at":1448770471203,"updated_by":1},{"id":4,"uuid":"af9e4f48-74b0-4756-97f9-b012f87debfc","name":"Owner","description":"Blog Owner","created_at":1448770471203,"created_by":1,"updated_at":1448770471203,"updated_by":1}],"roles_users":[{"id":1,"role_id":4,"user_id":1}],"permissions":[{"id":1,"uuid":"9bcb8689-1909-4888-9c3e-d0239e3edd67","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":1448770471324,"created_by":1,"updated_at":1448770471324,"updated_by":1},{"id":2,"uuid":"d7b1b9af-8104-4e01-bbcd-4d79bd5f7851","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":1448770471329,"created_by":1,"updated_at":1448770471329,"updated_by":1},{"id":3,"uuid":"4a084a48-5c3c-4100-a986-49e41d53debe","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":1448770471335,"created_by":1,"updated_at":1448770471335,"updated_by":1},{"id":4,"uuid":"b7b2c423-f16b-4c1e-a93a-f5fa355c5412","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":1448770471342,"created_by":1,"updated_at":1448770471342,"updated_by":1},{"id":5,"uuid":"d4c2cd83-f75c-49d0-b67f-e8ff97c11e89","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":1448770471349,"created_by":1,"updated_at":1448770471349,"updated_by":1},{"id":6,"uuid":"b19eb88d-cd13-43e0-9ac8-96c855f28ed9","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":1448770471355,"created_by":1,"updated_at":1448770471355,"updated_by":1},{"id":7,"uuid":"05a6bb08-c070-4468-a79c-7338d955b765","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":1448770471363,"created_by":1,"updated_at":1448770471363,"updated_by":1},{"id":8,"uuid":"3b9e145b-a046-402a-a250-55ee89742ded","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":1448770471380,"created_by":1,"updated_at":1448770471380,"updated_by":1},{"id":9,"uuid":"d109809b-76d8-41ad-af2d-5c9c22c145f3","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":1448770471410,"created_by":1,"updated_at":1448770471410,"updated_by":1},{"id":10,"uuid":"db70bd7b-c5e6-4191-b6b6-519593b83e33","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":1448770471415,"created_by":1,"updated_at":1448770471415,"updated_by":1},{"id":11,"uuid":"38cb20c6-1642-4900-a9ed-077e98afc4b1","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":1448770471419,"created_by":1,"updated_at":1448770471419,"updated_by":1},{"id":12,"uuid":"680b67da-b690-4783-95c1-1cfa3e534cad","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":1448770471439,"created_by":1,"updated_at":1448770471439,"updated_by":1},{"id":13,"uuid":"59718803-76bc-4a3e-96ec-964795b95ccb","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":1448770471443,"created_by":1,"updated_at":1448770471443,"updated_by":1},{"id":14,"uuid":"6e73d1a5-cea0-4403-9b15-a0e34967b5a0","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":1448770471447,"created_by":1,"updated_at":1448770471447,"updated_by":1},{"id":15,"uuid":"21790c57-cc78-4b7c-8090-c07324546c3e","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":1448770471452,"created_by":1,"updated_at":1448770471452,"updated_by":1},{"id":16,"uuid":"ff1332bb-0ed3-49dd-857c-eac11b25619d","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":1448770471458,"created_by":1,"updated_at":1448770471458,"updated_by":1},{"id":17,"uuid":"09aed2be-9f86-43b7-a309-c79c8cd58dcb","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":1448770471463,"created_by":1,"updated_at":1448770471463,"updated_by":1},{"id":18,"uuid":"b75b2367-8506-4402-8ab0-46fc07f21501","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":1448770471468,"created_by":1,"updated_at":1448770471468,"updated_by":1},{"id":19,"uuid":"50984c82-5701-4973-9bd2-cdaf5492c497","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":1448770471473,"created_by":1,"updated_at":1448770471473,"updated_by":1},{"id":20,"uuid":"41bb480e-34b0-498b-b5ee-f457e2356026","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":1448770471484,"created_by":1,"updated_at":1448770471484,"updated_by":1},{"id":21,"uuid":"7ec0e642-13f2-492d-a066-e0a0ee85a821","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":1448770471489,"created_by":1,"updated_at":1448770471489,"updated_by":1},{"id":22,"uuid":"5e088385-1b9a-45f5-8b69-1e5f31ebafa0","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":1448770471493,"created_by":1,"updated_at":1448770471493,"updated_by":1},{"id":23,"uuid":"c642d485-e247-41ae-9dc1-d146b1c7befc","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":1448770471499,"created_by":1,"updated_at":1448770471499,"updated_by":1},{"id":24,"uuid":"ace4bc89-31fb-449a-9718-9bb0225fdd12","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":1448770471512,"created_by":1,"updated_at":1448770471512,"updated_by":1},{"id":25,"uuid":"8932fba1-dbff-4d02-943d-67ddc8f7af75","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":1448770471516,"created_by":1,"updated_at":1448770471516,"updated_by":1},{"id":26,"uuid":"a0430a5e-6648-4a88-bc37-929233df682d","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":1448770471522,"created_by":1,"updated_at":1448770471522,"updated_by":1},{"id":27,"uuid":"7f5b4635-ff74-4fa6-b4a0-a90f53375ffc","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":1448770471527,"created_by":1,"updated_at":1448770471527,"updated_by":1},{"id":28,"uuid":"6abb5cfd-af9d-49ca-bf86-3db50af37fcf","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":1448770471531,"created_by":1,"updated_at":1448770471531,"updated_by":1},{"id":29,"uuid":"f89aa70a-d198-4294-a495-da91f8c1e7e2","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":1448770471535,"created_by":1,"updated_at":1448770471535,"updated_by":1},{"id":30,"uuid":"d9623133-6c08-453b-8f6c-fbcce7c6c958","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":1448770471541,"created_by":1,"updated_at":1448770471541,"updated_by":1}],"permissions_users":[],"permissions_roles":[{"id":1,"role_id":1,"permission_id":1},{"id":2,"role_id":1,"permission_id":2},{"id":3,"role_id":1,"permission_id":3},{"id":4,"role_id":1,"permission_id":4},{"id":5,"role_id":1,"permission_id":5},{"id":6,"role_id":1,"permission_id":6},{"id":7,"role_id":1,"permission_id":7},{"id":8,"role_id":1,"permission_id":8},{"id":9,"role_id":1,"permission_id":9},{"id":10,"role_id":1,"permission_id":10},{"id":11,"role_id":1,"permission_id":11},{"id":12,"role_id":1,"permission_id":12},{"id":13,"role_id":1,"permission_id":13},{"id":14,"role_id":1,"permission_id":14},{"id":15,"role_id":1,"permission_id":15},{"id":16,"role_id":1,"permission_id":16},{"id":17,"role_id":1,"permission_id":17},{"id":18,"role_id":1,"permission_id":18},{"id":19,"role_id":1,"permission_id":19},{"id":20,"role_id":1,"permission_id":20},{"id":21,"role_id":1,"permission_id":21},{"id":22,"role_id":1,"permission_id":22},{"id":23,"role_id":1,"permission_id":23},{"id":24,"role_id":1,"permission_id":24},{"id":25,"role_id":1,"permission_id":25},{"id":26,"role_id":1,"permission_id":26},{"id":27,"role_id":1,"permission_id":27},{"id":28,"role_id":1,"permission_id":28},{"id":29,"role_id":1,"permission_id":29},{"id":30,"role_id":1,"permission_id":30},{"id":31,"role_id":2,"permission_id":8},{"id":32,"role_id":2,"permission_id":9},{"id":33,"role_id":2,"permission_id":10},{"id":34,"role_id":2,"permission_id":11},{"id":35,"role_id":2,"permission_id":12},{"id":36,"role_id":2,"permission_id":13},{"id":37,"role_id":2,"permission_id":14},{"id":38,"role_id":2,"permission_id":16},{"id":39,"role_id":2,"permission_id":17},{"id":40,"role_id":2,"permission_id":18},{"id":41,"role_id":2,"permission_id":19},{"id":42,"role_id":2,"permission_id":20},{"id":43,"role_id":2,"permission_id":21},{"id":44,"role_id":2,"permission_id":24},{"id":45,"role_id":2,"permission_id":25},{"id":46,"role_id":2,"permission_id":26},{"id":47,"role_id":2,"permission_id":27},{"id":48,"role_id":2,"permission_id":28},{"id":49,"role_id":2,"permission_id":29},{"id":50,"role_id":2,"permission_id":30},{"id":51,"role_id":3,"permission_id":8},{"id":52,"role_id":3,"permission_id":9},{"id":53,"role_id":3,"permission_id":11},{"id":54,"role_id":3,"permission_id":13},{"id":55,"role_id":3,"permission_id":14},{"id":56,"role_id":3,"permission_id":16},{"id":57,"role_id":3,"permission_id":17},{"id":58,"role_id":3,"permission_id":18},{"id":59,"role_id":3,"permission_id":20},{"id":60,"role_id":3,"permission_id":24},{"id":61,"role_id":3,"permission_id":25},{"id":62,"role_id":3,"permission_id":30}],"permissions_apps":[],"settings":[{"id":1,"uuid":"24e0af9b-478c-47c7-8ff7-ff70c84860c1","key":"databaseVersion","value":"004","type":"core","created_at":1448770472390,"created_by":1,"updated_at":1448770472390,"updated_by":1},{"id":2,"uuid":"aee5e104-6c3d-4c76-9c72-08fce2fefad7","key":"dbHash","value":"0b07c583-a930-4fb8-8a09-1c1ecd8a1f60","type":"core","created_at":1448770472390,"created_by":1,"updated_at":1448770472550,"updated_by":1},{"id":3,"uuid":"7cebff71-a3e5-4726-b164-4078235e145b","key":"nextUpdateCheck","value":"1473270140","type":"core","created_at":1448770472391,"created_by":1,"updated_at":1473183740470,"updated_by":1},{"id":4,"uuid":"28851b30-8252-40d0-af42-097a12de94f6","key":"displayUpdateNotification","value":"0.10.0","type":"core","created_at":1448770472391,"created_by":1,"updated_at":1473183740479,"updated_by":1},{"id":5,"uuid":"db5a1a9c-18f1-4aa0-9896-e0bbd897a77c","key":"title","value":"@johnmosesman","type":"blog","created_at":1448770472392,"created_by":1,"updated_at":1471197516572,"updated_by":1},{"id":6,"uuid":"431ca9c0-239d-4a01-8c33-42e9d02281b0","key":"description","value":"Things I've learned related to programming.","type":"blog","created_at":1448770472393,"created_by":1,"updated_at":1471197516575,"updated_by":1},{"id":7,"uuid":"4064eae8-e331-4057-a85e-d1ac0c6fb18a","key":"logo","value":"","type":"blog","created_at":1448770472393,"created_by":1,"updated_at":1471197516577,"updated_by":1},{"id":8,"uuid":"518140d4-ddd8-4b52-978b-39d344abb7ee","key":"cover","value":"","type":"blog","created_at":1448770472393,"created_by":1,"updated_at":1471197516579,"updated_by":1},{"id":9,"uuid":"a2cd3b6f-0ed8-4ac4-bdf1-ada165f07474","key":"defaultLang","value":"en_US","type":"blog","created_at":1448770472394,"created_by":1,"updated_at":1471197516581,"updated_by":1},{"id":10,"uuid":"caf10879-7553-4034-a293-3f8646c28265","key":"postsPerPage","value":"5","type":"blog","created_at":1448770472394,"created_by":1,"updated_at":1471197516582,"updated_by":1},{"id":11,"uuid":"d961b0a9-989f-4d37-8a2c-2d91a13ea98c","key":"forceI18n","value":"true","type":"blog","created_at":1448770472394,"created_by":1,"updated_at":1471197516584,"updated_by":1},{"id":12,"uuid":"29598353-25c5-4b20-b8de-44476d2eede5","key":"permalinks","value":"/:slug/","type":"blog","created_at":1448770472394,"created_by":1,"updated_at":1471197516586,"updated_by":1},{"id":13,"uuid":"34d8abed-8407-46ba-9acf-6adde795467f","key":"ghost_head","value":"","type":"blog","created_at":1448770472394,"created_by":1,"updated_at":1471197516589,"updated_by":1},{"id":14,"uuid":"92e042e1-7190-4ecb-874d-8c4b5ad9c9ac","key":"ghost_foot","value":"<div style=\"text-align: center; margin-bottom: 3em;\">\n\t<a style=\"font-size: 0.75em; margin: 0 2em;\" href=\"https://twitter.com/johnmosesman\">Twitter</a>\n\t<a style=\"font-size: 0.75em; margin: 0 2em;\" href=\"http://johnmosesman.com/about/\">About Me</a>    \n</div>\n","type":"blog","created_at":1448770472395,"created_by":1,"updated_at":1471197516591,"updated_by":1},{"id":15,"uuid":"5df1394c-c0c9-46e0-a747-462a8edf32ad","key":"labs","value":"{}","type":"blog","created_at":1448770472395,"created_by":1,"updated_at":1471197516593,"updated_by":1},{"id":16,"uuid":"cdb9bb89-3003-453d-80b7-6c944c45f841","key":"navigation","value":"[{\"label\":\"Home\",\"url\":\"http://johnmosesman.com\"},{\"label\":\"About\",\"url\":\"/about\"}]","type":"blog","created_at":1448770472395,"created_by":1,"updated_at":1471197516594,"updated_by":1},{"id":17,"uuid":"c6594407-1a7d-43c8-8e22-a9509038f1a6","key":"activeApps","value":"[]","type":"app","created_at":1448770472396,"created_by":1,"updated_at":1448770472396,"updated_by":1},{"id":18,"uuid":"6a46ce2e-62a1-4a0c-aa78-678903938aa4","key":"installedApps","value":"[]","type":"app","created_at":1448770472396,"created_by":1,"updated_at":1470912213824,"updated_by":1},{"id":19,"uuid":"704099c4-dec0-491a-a71f-0a920b3e4623","key":"isPrivate","value":"false","type":"private","created_at":1448770472396,"created_by":1,"updated_at":1471197516596,"updated_by":1},{"id":20,"uuid":"3ab43ef0-c9ae-4343-9b26-6fcaac33d48f","key":"password","value":"null","type":"private","created_at":1448770472396,"created_by":1,"updated_at":1471197516598,"updated_by":1},{"id":21,"uuid":"af935af0-de29-4e1a-9d5f-c23ec384e59c","key":"activeTheme","value":"casper","type":"theme","created_at":1448770472395,"created_by":1,"updated_at":1471197516588,"updated_by":1}],"tags":[{"id":2,"uuid":"6a4d161b-5c6f-447c-a798-815b10b19495","name":"git","slug":"git","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1448829820401,"created_by":1,"updated_at":1448829820401,"updated_by":1},{"id":3,"uuid":"88f597d2-a998-4bd5-9237-c275405b27a8","name":"rebase","slug":"rebase","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1448829820414,"created_by":1,"updated_at":1448829820414,"updated_by":1},{"id":4,"uuid":"bd8c9ca8-fe3c-4e55-9233-41364a699bad","name":"tutorial","slug":"tutorial","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1448829820422,"created_by":1,"updated_at":1448829820422,"updated_by":1},{"id":5,"uuid":"aa335117-db07-415b-b885-5103267730d2","name":"rails","slug":"rails","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1457296047404,"created_by":1,"updated_at":1457296047404,"updated_by":1},{"id":6,"uuid":"288a1cf5-9e6d-46de-bd23-cd705b36a2d6","name":"api","slug":"api","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1457296047418,"created_by":1,"updated_at":1457296047418,"updated_by":1},{"id":7,"uuid":"7c8fd560-85b8-4dff-bdcf-6c0a5bd22d2e","name":"testing","slug":"testing","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1457296047427,"created_by":1,"updated_at":1457296047427,"updated_by":1},{"id":8,"uuid":"5eecf5fc-3749-44d8-a57c-bb4e3a3347ee","name":"minitest","slug":"minitest","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1457296047433,"created_by":1,"updated_at":1457296047433,"updated_by":1},{"id":9,"uuid":"ee0f0ff8-09b1-4561-adb5-8f1bd2376035","name":"startups","slug":"startups","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1463503482193,"created_by":1,"updated_at":1463503482193,"updated_by":1},{"id":10,"uuid":"d421ffeb-6b78-4765-b8a6-f42aa53fc30e","name":"phoenix","slug":"phoenix","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1473183951700,"created_by":1,"updated_at":1473183951700,"updated_by":1},{"id":11,"uuid":"dd48ddb8-8c56-4a5a-8668-2516c86f5ac0","name":"mvc","slug":"mvc","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1473183951722,"created_by":1,"updated_at":1473183951722,"updated_by":1}],"posts_tags":[{"id":2,"post_id":2,"tag_id":2,"sort_order":0},{"id":3,"post_id":2,"tag_id":3,"sort_order":1},{"id":4,"post_id":2,"tag_id":4,"sort_order":2},{"id":5,"post_id":3,"tag_id":5,"sort_order":0},{"id":6,"post_id":3,"tag_id":6,"sort_order":1},{"id":7,"post_id":3,"tag_id":7,"sort_order":2},{"id":8,"post_id":3,"tag_id":8,"sort_order":3},{"id":9,"post_id":4,"tag_id":7,"sort_order":0},{"id":10,"post_id":4,"tag_id":5,"sort_order":1},{"id":11,"post_id":4,"tag_id":8,"sort_order":2},{"id":12,"post_id":6,"tag_id":9,"sort_order":0},{"id":13,"post_id":8,"tag_id":5,"sort_order":0},{"id":14,"post_id":8,"tag_id":10,"sort_order":1},{"id":15,"post_id":8,"tag_id":11,"sort_order":2}],"apps":[],"app_settings":[],"app_fields":[],"client_trusted_domains":[]}}]}